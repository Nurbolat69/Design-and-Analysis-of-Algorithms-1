package algorithms;

import java.util.Arrays;

public class ClosestPair {
    public static double closestPair(double[][] points) {
        Arrays.sort(points, (a, b) -> Double.compare(a[0], b[0]));
        return closest(points, 0, points.length - 1);
    }

    private static double closest(double[][] points, int left, int right) {
        if (right - left <= 3) {
            double min = Double.MAX_VALUE;
            for (int i = left; i <= right; i++) {
                for (int j = i + 1; j <= right; j++) {
                    min = Math.min(min, dist(points[i], points[j]));
                }
            }
            return min;
        }

        int mid = (left + right) / 2;
        double d1 = closest(points, left, mid);
        double d2 = closest(points, mid + 1, right);
        double d = Math.min(d1, d2);

        return Math.min(d, stripClosest(points, left, right, points[mid][0], d));
    }

    private static double stripClosest(double[][] points, int left, int right, double midX, double d) {
        double[][] strip = Arrays.stream(points, left, right + 1)
                .filter(p -> Math.abs(p[0] - midX) < d)
                .toArray(double[][]::new);

        Arrays.sort(strip, (a, b) -> Double.compare(a[1], b[1]));
        double min = d;
        for (int i = 0; i < strip.length; i++) {
            for (int j = i + 1; j < strip.length && (strip[j][1] - strip[i][1]) < min; j++) {
                min = Math.min(min, dist(strip[i], strip[j]));
            }
        }
        return min;
    }

    private static double dist(double[] a, double[] b) {
        double dx = a[0] - b[0], dy = a[1] - b[1];
        return Math.sqrt(dx * dx + dy * dy);
    }
}
